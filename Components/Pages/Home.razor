@page "/"
@using CoffeeShopUser.DTO.CartItemDTO
@using CoffeeShopUser.DTO.CategoryDTO
@using CoffeeShopUser.DTO.ProductDTO
@using CoffeeShopUser.DTO.ProductVariantDTO
@using CoffeeShopUser.DTO.SubCategoryDTO

@inject CoffeeShopUser.Services.CartS.ICartService CartService
@inject CoffeeShopUser.Services.CartItemS.ICartItemService CartItemService
@inject CoffeeShopUser.Services.CategoryS.ICategoryService CategoryService
@inject NavigationManager NavigationManager

<div class="container mt-4">

	@if (status)
	{
		<nav aria-label="breadcrumb" style="--bs-breadcrumb-divider: '>';">
			<ol class="breadcrumb">
				<li class="breadcrumb-item">
					<a href="#" @onclick="BackToCategories">Menu</a>
				</li>
				@for (int i = 1; i < breadcrumbs.Count; i++)
				{
					var crumb = breadcrumbs[i];
					var isLast = (i == breadcrumbs.Count - 1);

					<li class="breadcrumb-item @(isLast ? "active" : "")" aria-current="page">
						@if (!isLast)
						{
							<span>@crumb</span>
						}
						else
						{
							<strong><span>@crumb</span></strong>
						}
					</li>
				}
			</ol>
		</nav>
	}

	@if (categories != null)
	{
		<h1 class="my-4">Menu</h1>
		<div class="row">
			@foreach (var category in categories)
			{
				<div class="col-md-3">
					<button class="btn btn-primary" style="width : 250px; height : 150px" @onclick="() => LoadSubcategories(category.Id, category.Name)">
						<h4><strong>@category.Name</strong></h4>
					</button>
				</div>
			}
		</div>
	}

	@if (subcategories != null)
	{
		<div class="row mt-4">
			@foreach (var subcategory in subcategories)
			{
				<div class="col-md-3">
					<button class="btn btn-primary" style="width : 250px; height : 150px" @onclick="() => LoadProducts(subcategory.Id, subcategory.Name)">
						<h4><strong>@subcategory.Name</strong></h4>
					</button>
				</div>
			}
		</div>
	}

	@if (products != null)
	{
		<div class="row mt-4">
			@foreach (var product in products)
			{
				<div class="col-md-3">
					<button class="btn btn-primary" style="width : 250px; height : 150px" @onclick="() => LoadProductVariants(product.Id, product.Name)">
						<h4><strong>@product.Name</strong></h4>
					</button>
				</div>
			}
		</div>
	}

	@if (productVariants != null)
	{
		<div class="row mt-4">
			@foreach (var productvariant in productVariants)
			{
				<div class="col-md-3">
					<button class="btn btn-primary" style="width : 250px; height : 150px"
					@onclick="() => ShowVariantDetails(productvariant)">
						<h4><strong>@productvariant.Name</strong></h4>
					</button>
				</div>
			}
		</div>
	}

	@if (selectedVariant != null)
	{

		<div class="row g-4 align-items-center mt-5">
			<div class="col-md-6 text-center">
				<img src="https://localhost:7035/uploads/@selectedVariant.ImageUrl"
					 class="img-fluid rounded border"
				style="max-width: 250px; height: auto;" />


			</div>
			<div class="col-md-6">
				<h2 class="mt-3"><strong>@selectedVariant.Name</strong></h2>
				<p class="text-muted">@selectedVariant.Description</p>
				<h5>MMK @selectedVariant.Price</h5>


				<button class="btn btn-success btn-lg mt-2"
						style="border : 1px solid black; border-radius: 50px" @onclick="AddToCartAndRedirect">
					Add to Cart
				</button>

			</div>
		</div>


	}

</div>

@code {
	private List<CategoryDto>? categories;
	private List<SubCategoryDto>? subcategories;
	private List<ProductDto>? products;
	private List<ProductVariantDto> productVariants;
	private ProductVariantDto? selectedVariant;
	private List<string> breadcrumbs = new() { "Menu" };
	private bool status = false;

	protected override async Task OnInitializedAsync()
	{
		categories = await CategoryService.GetAllCategory();
	}

	private async Task LoadSubcategories(string categoryId, string categoryName)
	{
		status = true;
		breadcrumbs = new() { "Menu", categoryName };

		subcategories = await CategoryService.GetSubcategoriesByCategoryIdAsync(categoryId);
		categories = null;
		products = null;

		StateHasChanged();
	}

	public async Task LoadProducts(string subcategoryId, string subcategoryName)
	{
		products = await CategoryService.GetProductsBySubCategoryIdAsync(subcategoryId);

		if (!breadcrumbs.Contains(subcategoryName))
		{
			breadcrumbs.Add(subcategoryName);
		}

		categories = null;
		subcategories = null;
		StateHasChanged();
	}

	public async Task LoadProductVariants(string productId, string productName)
	{
		productVariants = await CategoryService.GetProductVariantsByProductIdAsync(productId);

		if (!breadcrumbs.Contains(productName))
		{
			breadcrumbs.Add(productName);
		}

		categories = null;
		subcategories = null;
		products = null;
		StateHasChanged();
	}

	private void ShowVariantDetails(ProductVariantDto variant)
	{
		if (!breadcrumbs.Contains(variant.Name))
		{
			breadcrumbs.Add(variant.Name);
		}
		categories = null;
		subcategories = null;
		products = null;
		productVariants = null;
		selectedVariant = variant;
		StateHasChanged();
	}

	private async Task AddToCartAndRedirect()
	{
		if (selectedVariant == null)
			return;

		// Step 1: Get or create cart
		var cartId = await CartService.GetOrCreateCartIdAsync();

		// Step 2: Prepare the CartItemDto
		var cartItem = new CartItemDto
			{
				CartId = cartId.ToUpper(),
				ProductVariantId = selectedVariant.Id,
				Quantity = 1,
				Price = selectedVariant.Price
			};

		// Step 3: Add to cart
		await CartItemService.AddCartItemAsync(cartItem);
		
		NavigationManager.NavigateTo("/cart");
	}

	private async Task BackToCategories()
	{
		breadcrumbs = new() { "Menu" };
		categories = await CategoryService.GetAllCategory();
		subcategories = null;
		products = null;
		productVariants = null;
		selectedVariant = null;
		status = false;
		StateHasChanged();
	}
}
