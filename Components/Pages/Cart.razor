@page "/cart"
@using Blazored.LocalStorage;
@using CoffeeShopUser.DTO.CartItemDTO

@inject CoffeeShopUser.Services.CartS.ICartService CartService
@inject CoffeeShopUser.Services.CartItemS.ICartItemService CartItemService
@inject CoffeeShopUser.Services.CartStateService CartStateService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager

<div class="container mt-5">
	<div class="row">

		<div class="col-md-3 mb-3">
			<button class="btn btn-primary" @onclick="BackToMenu">
				<i class="fas fa-arrow-left"></i> Back to Menu
			</button>
		</div>
		<h1 class="col-md-4 text-center">Cart</h1>

		<div class="col-md-8">
			
			<div style="margin-bottom: 45px"></div>

			@if (cartItems == null || !cartItems.Any())
			{
				<p class="ms-1 mt-3">Your cart is empty.</p>

				<button class="btn btn-success btn-lg mt-2"
						style="border : 1px solid black; border-radius: 50px" @onclick="AddMoreProductVariant">
					+ Add More Items
				</button>
			}
			else
			{
				@foreach (var item in cartItems)
				{

					<div class="card mb-3 position-relative shadow">
						<button class="position-absolute top-0 end-0 m-2 text-white bg-danger border-0"
								style="width: 32px; height: 32px; font-size: 16px;"
								title="Remove item"
								@onclick="() => RemoveCartItem(item.Id)">
							✖
						</button>

						 
						<div class="row g-0 align-items-center">
							<div class="col-md-4 text-center">
								<img src="https://localhost:7035/uploads/@item.ImageUrl"
									 class="img-fluid rounded-start" style="max-width: 150px;" />
							</div>

							<div class="col-md-8">
								<div class="card-body">
									<h5 class="card-title">@item.ProductVariantName</h5>
									<p class="card-text">MMK @item.SubTotal</p>

									<!-- Quantity Controls -->
									<div class="d-flex align-items-center">
										<!-- Minus / Trash -->
										<button class="btn btn-outline-secondary me-2"
												style="width: 40px;"
												@onclick="() => UpdateQuantity(item.Id, item.Quantity - 1)">
											<i class="bi bi-dash"></i>
										</button>

										<span class="mx-2">@item.Quantity</span>

										<!-- Plus -->
										<button class="btn btn-outline-secondary ms-2"
												style="width: 40px;"
												@onclick="() => UpdateQuantity(item.Id, item.Quantity + 1)">
											<i class="bi bi-plus"></i>
										</button>
									</div>
								</div>
							</div>
						</div>
					</div>
				}
				<button class="btn btn-success btn-lg mt-2"
						style="border : 1px solid black; border-radius: 50px" @onclick="AddMoreProductVariant">
					+ Add More Items
				</button>
			}
		</div>

		<div class="col-md-4 ">
			<div class="card p-3 shadow" style="margin-top: 45px">
				<h4>Summary</h4>
				<p>Total Items: @cartItems?.Count</p>
				<p>Total Price: MMK @cartItems?.Sum(i => i.Price * i.Quantity)</p>
				<button class="btn btn-success btn-lg w-100" @onclick="Checkout">Checkout</button>
			</div>
		</div>

	</div>
</div>

@code {
	private List<CartItemDisplayDto> cartItems = new();

	protected override async Task OnInitializedAsync()
	{
		var cartId = await LocalStorage.GetItemAsync<string>("cartId");

		if (!string.IsNullOrEmpty(cartId))
		{
			var summary = await CartItemService.GetCartItemsByCartIdAsync(cartId);
			cartItems = summary.CartItems;
			CartStateService.SetCartItemCount(cartItems.Count);
		}
	}

	private async Task UpdateQuantity(string cartItemId, int newQty)
	{
		if (newQty <= 0)
		{
			var itemToRemove = cartItems.FirstOrDefault(i => i.Id == cartItemId);
			if (itemToRemove != null)
			{
				cartItems.Remove(itemToRemove);
			}

			await CartItemService.DeleteCartItemAsync(cartItemId);
			CartStateService.SetCartItemCount(cartItems.Count);

			StateHasChanged();
		}
		else
		{
			await CartItemService.UpdateCartItemQuantityAsync(cartItemId, newQty);

			var cartId = await LocalStorage.GetItemAsync<string>("cartId");
			var summary = await CartItemService.GetCartItemsByCartIdAsync(cartId);
			cartItems = summary.CartItems;
		}
	}

	private async Task RemoveCartItem(string cartItemId)
	{
		cartItems.RemoveAll(i => i.Id == cartItemId);
		await CartItemService.DeleteCartItemAsync(cartItemId);
		CartStateService.SetCartItemCount(cartItems.Count);
		StateHasChanged();
	}


	private async Task AddMoreProductVariant()
	{
		NavigationManager.NavigateTo("/");
	}

	private void BackToMenu()
	{
		NavigationManager.NavigateTo("/");
	}

	private async Task Checkout()
	{
		NavigationManager.NavigateTo("/order");
	}
}
